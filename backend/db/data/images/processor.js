const path = require('path');
const { God, Item } = require('../../models')

// Import the array of relative image paths generated by the frontend script
const imagePaths = require('/home/jacob/Final-Projects/S2GB/frontend/public/images/index.Js');

function extractIdentifier(filePath) {
    const parts = filePath.split('/');

    // Example: gods/a/achilles/art/card.png → "achilles"
    // Example: items/icons/magic_shoes.png → "magic_shoes"
    if (parts[0] === 'gods') return parts[2]; // gods/{letter}/{godName}/...
    if (parts[0] === 'items') return path.basename(filePath, path.extname(filePath)); // just the item name from filename

    return null;
}

function getImageableType(filePath) {
    if (filePath.startsWith('gods/')) return 'god';
    if (filePath.startsWith('items/')) return 'item';
    return null;
}

function camelToTitle(str) {
    return str
        .replace(/([a-z])([A-Z])/g, '$1 $2') // insert space before capital (camelCase -> Title Case)
        .replace(/-/g, ' ')                     // replace hyphens with spaces
        .replace(/^./, s => s.toUpperCase()); // capitalize first letter
}

async function processImages() {
    const results = [];

    for (const relativePath of imagePaths) {
        // const parts = relativePath.split('/');
        const imageableType = getImageableType(relativePath);
        const imageUrl = `/images/${relativePath}`;
        let imageableId = null;
        const identifier = extractIdentifier(relativePath); // Get the initial identifier

        if (imageableType === 'god') {
            const capitalizedIdentifier = identifier.charAt(0).toUpperCase() + identifier.slice(1);
            let god;
            if (relativePath.includes('/abilities/')) {
                god = await God.findOne({ where: { godName: capitalizedIdentifier } });
                if (god) {
                    imageableId = god.godId;
                } else {
                    console.warn(`  Could not find god with godName: ${identifier} for ability image.`);
                }
            } else {
                god = await God.findOne({ where: { godName: capitalizedIdentifier } });
                if (god) {
                    imageableId = god.godId;
                } else {
                    console.warn(`  Could not find god with godName: ${identifier} for main god image.`);
                }
            }
        } else if (imageableType === 'item') {
            const formattedName = camelToTitle(identifier);
            const item = await Item.findOne({ where: { name: formattedName } });
            if (item) {
                imageableId = item.id.toString();
            } else {
                console.warn(`  Could not find item with name: ${formattedName}.`);
            }
        }

        if (imageableId) {
            results.push({
                imageUrl,
                imageableType,
                imageableId,
            });
        } else {
            console.warn(`  Could not resolve ID for image path: ${relativePath}`);
        }

    }

    return results;
}

module.exports = processImages;
